generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ANONYMOUS
  STAFF
  HOD
  MASTER
  ADMIN
}

enum DesignationType {
  NONE
  ASSOCIATE_PROFESSOR
  ASSISTANT_PROFESSOR
  PROFESSOR
}

enum FormStatusType {
  PENDING
  APPROVED
  REJECTED
}


enum StatusType {
  ACTIVE
  INACTIVE
  BANNED
}

enum HrEvaluation {
  NOTSUBMITTED
  PENDING
  APPROVED
  REJECTED
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum PublicationIndexingSource {
  NONE
  SCI 
  SCOPUS 
  WOS
}


enum DepartmentType {
  NONE
  CSE
  ECE
  EEE
  MECH
  IT
  AIDS
  AIML
  CCE
  CSBS
}

enum SemesterType {
  ODD 
  EVEN
  NONE
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String? @default("")
  email String @unique
  password String
  role UserType? @default(ANONYMOUS)
  designation DesignationType? @default(NONE)
  department DepartmentType? @default(NONE)
  phonenumber String? @default("000-000-0000")
  gender GenderType? @default(OTHER)
  formstatus FormStatusType? @default(PENDING)
  status StatusType?  @default(INACTIVE)
  isfirst Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssociateProfessor{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  academics Academics? 
  // research Research?
}


//---------academics form object-----------------
model Academics{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  associate_academics AssociateProfessor @relation(fields: [formId], references: [id])
  formId String @unique @db.ObjectId
  teachingAssignment TeachingAssigment? // teachingassignment of academics object 1
  passPercentage PassPercentage?// passpercentage of academics object 2
  studentFeedbackAverage StudentFeedbackAverage? // studentfeedbackaverage of academics
  teachingResourceCreation TeacherResourceCreation? // student feedback teaching resource creation of academics
  organizingGuestLectures OrganizingGuestLectures? // student feedback organizing guest lectures of academics and visiting faculty for respective subjects
  subjectProjectsGuided StudentProjectGuided? // student feedback subject projects guided of academics
  facultyDevelopmentProgramme FacultyDevelopmentProgramme? // it can be either programme / workshop / confreence organized by the staff
  involvementInHighLevelCompetition InvolvementInHighLevelCompetition? // involvement in high level competition and innovative projects
  fdpOnlineCourseCompleted FdpOnlineCourseCompleted?
  mouSignedAndActivity MouSignedAndActivity? // mou signed and activity conducted with industries 
  tutorWardMeet TutorWardMeet? // tutor ward meeting conducted by the staff
  responsibilitiesHeld ResponsibilitiesHeld?
}

model TeachingAssigment{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_teachass Academics @relation(fields: [AcademicsId], references: [id])
  AcademicsId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  average Float
  teachingassignment_table TeachingAssigment_Table[]
}

model TeachingAssigment_Table{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  teachass_table TeachingAssigment @relation(fields: [teachingAssignmentId], references: [id])
  teachingAssignmentId String @unique @db.ObjectId
  semester String
  branch String
  section String
  coursetitle String
  numberofcredit Int
  points Int
  studentfeedback Float
}

model PassPercentage{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_passpercentage Academics @relation(fields: [passPercentageId], references: [id])
  passPercentageId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  average Float
  passpercentage_table PassPercentage_Table[]
}

model PassPercentage_Table{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  passpercentage_table PassPercentage @relation(fields: [passPercentageId], references: [id])
  passPercentageId String @unique @db.ObjectId
  academicYear String
  semester SemesterType @default(NONE)
  subjectName String
  passPercent Float
}


model StudentFeedbackAverage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_studentfeedbackaverage Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
}

model TeacherResourceCreation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_teacherresourcecreation Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
}

model OrganizingGuestLectures {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_organizingguestlectures Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String

}

model StudentProjectGuided {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_studentprojectguided Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  projectDetailsTable ProjectDetails_Table[]
  publicationDetailsTable PublicationDetails_Table[]
}

model ProjectDetails_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  projectDetailsTable StudentProjectGuided @relation(fields: [studentProjectGuidedId], references: [id])
  studentProjectGuidedId String @unique @db.ObjectId
  nameOfProgramme String
  yearOfStudy DateTime
  dateOfCompletion DateTime
  points Int

}

model PublicationDetails_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  publicationDetailsTable StudentProjectGuided @relation(fields: [studentProjectGuidedId], references: [id])
  studentProjectGuidedId String @unique @db.ObjectId
  paperTitle String
  journalName String
  publicationIndexingSource PublicationIndexingSource @default(NONE)
  monthYearOfPublication DateTime
}

model FacultyDevelopmentProgramme {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_facultydevelopmentprogramme Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  facultyDevelopmentProgrammeTable FacultyDevelopmentProgramme_Table[]
}

model FacultyDevelopmentProgramme_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  facultyDevelopmentProgrammeTable FacultyDevelopmentProgramme @relation(fields: [facultyDevelopmentProgrammeId], references: [id])
  facultyDevelopmentProgrammeId String @unique @db.ObjectId 
  categoryOfEvent String
  titleOfTheEvent DateTime
  dateOfSanction DateTime
  fundReceivedFromAgency Int
  grantSanctioned String
}

model InvolvementInHighLevelCompetition {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academics_involvementinhighlevelcompetition Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  involvementInHighLevelCompetitionTable InvolvementInHighLevelCompetition_Table[]
}

model InvolvementInHighLevelCompetition_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  involvementInHighLevelCompetitionTable InvolvementInHighLevelCompetition @relation(fields: [involvementInHighLevelCompetitionId], references: [id])
  involvementInHighLevelCompetitionId String @unique @db.ObjectId
  competitionOnName String
  nameOfTheProjectMentored String
  dateOfParticipationOn String
  prizeWon String
  cashAward String?
}

model FdpOnlineCourseCompleted {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academic_fdponlinecoursecompleted Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  fdpOnlineCourseCompletedTable FdpOnlineCourseCompleted_Table[]
}

model FdpOnlineCourseCompleted_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fdpOnlineCourseCompletedTable FdpOnlineCourseCompleted @relation(fields: [fdpOnlineCourseCompletedId], references: [id])
  fdpOnlineCourseCompletedId String @unique @db.ObjectId
  courseName String
  dateOfStarting String
  dateOfCompletion DateTime
  courseProvider String
  score Float
}

model MouSignedAndActivity {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academic_mousignedandactivity Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  mouSignedAndActivityTable MouSignedAndActivity_Table[]
}

model MouSignedAndActivity_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  mouSignedAndActivityTable MouSignedAndActivity @relation(fields: [mouSignedAndActivityId], references: [id])
  mouSignedAndActivityId String @unique @db.ObjectId
  mouSigned String
  nameOfCompany String
  date DateTime
}
model TutorWardMeet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academic_tutorwardmeet Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  tutorWardMeetTable TutorWardMeet_Table[]
}

model TutorWardMeet_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  tutorWardMeetTable TutorWardMeet @relation(fields: [tutorWardMeetId], references: [id])
  tutorWardMeetId String @unique @db.ObjectId
  dateOfStart DateTime
  dateOfEnd DateTime
  valueAdditionStudent String
}

model ResponsibilitiesHeld {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  academic_responsibilitiesheld Academics @relation(fields: [academicId], references: [id])
  academicId String @unique @db.ObjectId
  proofrequired String
  erpproof String
  maxpoint Int
  selfevaluation Int
  hrevaluation HrEvaluation? @default(NOTSUBMITTED)
  hrcomments String
  responsibilitiesHeldTable ResponsibilitiesHeld_Table[]
}

model ResponsibilitiesHeld_Table {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  responsibilitiesHeldTable ResponsibilitiesHeld @relation(fields: [responsibilitiesHeldId], references: [id])
  responsibilitiesHeldId String @unique @db.ObjectId
  nameOfResponsibilityHeld String
  points Int
}


// -------- research object ---------

// model Research {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//  responsibilitiesHeldTable AssociateProfessor @relation(fields: [responsibilitiesHeldId], references: [id])
//   responsibilitiesHeldId String @unique @db.ObjectId
// }

